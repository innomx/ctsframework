% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ctsframework.R
\name{derive_scenario}
\alias{derive_scenario}
\title{Derive a new scenario from an existing one}
\usage{
derive_scenario(
  base_scenario,
  parameters = NULL,
  population = NULL,
  subject_model = NULL,
  treatment = NULL,
  pkpd_model = NULL,
  simulation = NULL,
  endpoints = NULL,
  summarization = NULL,
  ...,
  name = NULL,
  seed = NULL
)
}
\arguments{
\item{base_scenario}{A \link{scenario} which serves as the base scenario from which to derive.}

\item{parameters}{\link{parameters} module (optional).}

\item{population}{\link{population} module (optional).}

\item{subject_model}{\link{subject_model} module (optional).}

\item{treatment}{\link{treatment} module (optional).}

\item{pkpd_model}{\link{pkpd_model} module (optional).}

\item{simulation}{\link{simulation} module (optional).}

\item{endpoints}{\link{endpoints} module (optional).}

\item{summarization}{\link{summarization} module (optional).}

\item{...}{Further argument passed to \code{\link[=scenario]{scenario()}}.}

\item{name}{Optional scenario name. If omitted, a default name will be
generated such as \code{ScenarioX} where \code{X} is a number that is incremented for
each new scneario created.}

\item{seed}{RNG seed, for reproducibility.}
}
\value{
A \code{cts_scenario} object.
}
\description{
A new scenario can be derived from an existing one by overriding any of its
modules, or specific components of its modules.
}
\note{
By default, the derived scenario has the same RNG seed as the base
scenario. This can be changed by specifying the \code{seed} argument.
}
\examples{
# A silly example that does nothing. For realistic examples, see the vignette.

# Create a base scenario in which x=1
base <- scenario(name="base",
  parameters = parameters(x=1),
  simulation = simulation({cat("x =", x, "\n")})
)

# Overwrite the value of x in the derived scenario
derived <- derive_scenario(base, name="derived", parameters=parameters(x=2))

# Run both scenarios and observed the output
CTS(base)
CTS(derived)
}
